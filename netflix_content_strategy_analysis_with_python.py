# -*- coding: utf-8 -*-
"""Netflix Content Strategy Analysis with Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sDKwuF3fNg3jMo1QTSif8TU95xOMLAi7

# Importing Libraries and Setting Up Plotly Theme
"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio

pio.templates.default = "plotly_white"

"""# Loading the Netflix Dataset"""

from google.colab import files
uploaded = files.upload()

netflix_data = pd.read_csv("netflix_content_2023.csv")
netflix_data.head()

netflix_data.shape

netflix_data.info()

netflix_data.isnull().sum()

netflix_data.count()

netflix_data.describe()

"""# Data Cleaning: Converting 'Hours Viewed' to Numeric"""

# Remove commas from 'Hours Viewed' column and convert to float
netflix_data['Hours Viewed'] = netflix_data['Hours Viewed'].replace(',', '', regex=True).astype(float)

# Display 'Title' and cleaned 'Hours Viewed' columns
netflix_data[['Title', 'Hours Viewed']].head()

"""# Viewership by Content Type"""

# Aggregate total hours viewed by 'Content Type' (e.g., Movies, TV Shows)
content_type_viewership = netflix_data.groupby('Content Type')['Hours Viewed'].sum()

# Create a bar chart for total viewership hours by content type
fig = go.Figure(data=[
    go.Bar(
        x=content_type_viewership.index,      # X-axis: Content types
        y=content_type_viewership.values,     # Y-axis: Total hours viewed
        marker_color=['skyblue', 'salmon']    # Bar colors
    )
])

# Update chart layout with titles and dimensions
fig.update_layout(
    title='Total Viewership Hours by Content Type (2023)',
    xaxis_title='Content Type',
    yaxis_title='Total Hours Viewed (in billions)',
    xaxis_tickangle=0,
    height=500,
    width=800
)

fig.show()  # Display the chart

"""Viewership by Language"""

# Aggregate total viewership hours by language and sort in descending order
language_viewership = netflix_data.groupby('Language Indicator')['Hours Viewed'].sum().sort_values(ascending=False)

# Create a bar chart for total hours viewed by language
fig = go.Figure(data=[
    go.Bar(
        x=language_viewership.index,          # X-axis: Language
        y=language_viewership.values,         # Y-axis: Hours viewed
        marker_color='lightcoral'             # Bar color
    )
])

fig.update_layout(
    title='Total Viewership Hours by Language (2023)',
    xaxis_title='Language',
    yaxis_title='Total Hours Viewed (in billions)',
    xaxis_tickangle=45,                       # Rotate x-axis labels for readability
    height=600,
    width=1000
)

fig.show()  # Display the chart

"""Monthly Viewership Trends"""

# Convert 'Release Date' to datetime format
netflix_data['Release Date'] = pd.to_datetime(netflix_data['Release Date'])

# Extract the release month from the 'Release Date'
netflix_data['Release Month'] = netflix_data['Release Date'].dt.month

# Aggregate total viewership hours by month
monthly_viewership = netflix_data.groupby('Release Month')['Hours Viewed'].sum()

# Line chart to show monthly trends
fig = go.Figure(data=[
    go.Scatter(
        x=monthly_viewership.index,           # X-axis: Month
        y=monthly_viewership.values,          # Y-axis: Hours viewed
        mode='lines+markers',                 # Line chart with markers
        marker=dict(color='blue'),
        line=dict(color='blue')
    )
])


fig.update_layout(
    title='Total Viewership Hours by Release Month (2023)',
    xaxis_title='Month',
    yaxis_title='Total Hours Viewed (in billions)',
    xaxis=dict(
        tickmode='array',
        tickvals=list(range(1, 13)),
        ticktext=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    ),
    height=600,
    width=1000
)

fig.show()  # Display the chart

"""Titles Based on Viewership"""

# Select top 5 titles with the highest viewership hours
top_5_titles = netflix_data.nlargest(5, 'Hours Viewed')

# Display key details for these top 5 titles
top_5_titles[['Title', 'Hours Viewed', 'Language Indicator', 'Content Type', 'Release Date']]

"""Viewership Trends by Content Type and Month"""

# Create a pivot table with months as rows and content types as columns
monthly_viewership_by_type = netflix_data.pivot_table(index='Release Month',
                                                      columns='Content Type',
                                                      values='Hours Viewed',
                                                      aggfunc='sum')

# Plot line chart for each content type across months
fig = go.Figure()

for content_type in monthly_viewership_by_type.columns:
    fig.add_trace(
        go.Scatter(
            x=monthly_viewership_by_type.index,
            y=monthly_viewership_by_type[content_type],
            mode='lines+markers',
            name=content_type
        )
    )

fig.update_layout(
    title='Viewership Trends by Content Type and Release Month (2023)',
    xaxis_title='Month',
    yaxis_title='Total Hours Viewed (in billions)',
    xaxis=dict(
        tickmode='array',
        tickvals=list(range(1, 13)),
        ticktext=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    ),
    height=600,
    width=1000,
    legend_title='Content Type'
)

fig.show()  # Display the chart

"""Seasonal Viewership Analysis"""

# Define a function to map months to seasons
def get_season(month):
    if month in [12, 1, 2]:
        return 'Winter'
    elif month in [3, 4, 5]:
        return 'Spring'
    elif month in [6, 7, 8]:
        return 'Summer'
    else:
        return 'Fall'

# Apply the season mapping function
netflix_data['Release Season'] = netflix_data['Release Month'].apply(get_season)

# Aggregate total viewership hours by season
seasonal_viewership = netflix_data.groupby('Release Season')['Hours Viewed'].sum()

# Reorder seasons logically
seasons_order = ['Winter', 'Spring', 'Summer', 'Fall']
seasonal_viewership = seasonal_viewership.reindex(seasons_order)

# Create a bar chart for seasonal viewership
fig = go.Figure(data=[
    go.Bar(
        x=seasonal_viewership.index,
        y=seasonal_viewership.values,
        marker_color='orange'
    )
])

fig.update_layout(
    title='Total Viewership Hours by Release Season (2023)',
    xaxis_title='Season',
    yaxis_title='Total Hours Viewed (in billions)',
    xaxis_tickangle=0,
    height=500,
    width=800
)

fig.show()  # Display the chart

"""Monthly Release Count vs Viewership Hours"""

# Count the number of releases per month
monthly_releases = netflix_data['Release Month'].value_counts().sort_index()

# Sum total viewership hours per month
monthly_viewership = netflix_data.groupby('Release Month')['Hours Viewed'].sum()

# Create a dual-axis chart: bar for releases and line for viewership
fig = go.Figure()

fig.add_trace(
    go.Bar(
        x=monthly_releases.index,
        y=monthly_releases.values,
        name='Number of Releases',
        marker_color='goldenrod',
        opacity=0.7,
        yaxis='y1'
    )
)

fig.add_trace(
    go.Scatter(
        x=monthly_viewership.index,
        y=monthly_viewership.values,
        name='Viewership Hours',
        mode='lines+markers',
        marker=dict(color='red'),
        line=dict(color='red'),
        yaxis='y2'
    )
)

fig.update_layout(
    title='Monthly Release Patterns and Viewership Hours (2023)',
    xaxis=dict(
        title='Month',
        tickmode='array',
        tickvals=list(range(1, 13)),
        ticktext=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    ),
    yaxis=dict(title='Number of Releases', side='left'),
    yaxis2=dict(title='Total Hours Viewed (in billions)', overlaying='y', side='right'),
    height=600,
    width=1000
)

fig.show()  # Display the dual-axis chart

"""Weekly Release Patterns and Viewership"""

# Extract the day of the week for each release
netflix_data['Release Day'] = netflix_data['Release Date'].dt.day_name()

# Count releases per weekday in correct order
weekday_releases = netflix_data['Release Day'].value_counts().reindex(
    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
)

# Aggregate total viewership hours by weekday
weekday_viewership = netflix_data.groupby('Release Day')['Hours Viewed'].sum().reindex(
    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
)

# Create a dual-axis chart for weekly patterns
fig = go.Figure()

fig.add_trace(
    go.Bar(
        x=weekday_releases.index,
        y=weekday_releases.values,
        name='Number of Releases',
        marker_color='blue',
        opacity=0.6,
        yaxis='y1'
    )
)

fig.add_trace(
    go.Scatter(
        x=weekday_viewership.index,
        y=weekday_viewership.values,
        name='Viewership Hours',
        mode='lines+markers',
        marker=dict(color='red'),
        line=dict(color='red'),
        yaxis='y2'
    )
)

fig.update_layout(
    title='Weekly Release Patterns and Viewership Hours (2023)',
    xaxis=dict(title='Day of the Week'),
    yaxis=dict(title='Number of Releases', side='left'),
    yaxis2=dict(title='Total Hours Viewed (in billions)', overlaying='y', side='right'),
    height=600,
    width=1000
)

fig.show()  # Display the chart

"""Viewership Near Significant Holidays"""

# Define major holidays and significant dates
important_dates = [
    '2023-01-01',  # New Year's Day
    '2023-02-14',  # Valentine's Day
    '2023-07-04',  # Independence Day (US)
    '2023-10-31',  # Halloween
    '2023-12-25'   # Christmas Day
]

# Convert important dates to datetime format
important_dates = pd.to_datetime(important_dates)

# Identify releases within 3 days before/after the important dates
holiday_releases = netflix_data[netflix_data['Release Date'].apply(
    lambda x: any((x - date).days in range(-3, 4) for date in important_dates)
)]

# Aggregate total viewership for these holiday-related releases
holiday_viewership = holiday_releases.groupby('Release Date')['Hours Viewed'].sum()

# Display details of holiday-related releases
holiday_releases[['Title', 'Release Date', 'Hours Viewed']]